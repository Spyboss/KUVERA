// Â© SriCrypto
// v 1.0.1
//@version=4
strategy("Bollinger Bands Strategy by SriCrypto", overlay=true, default_qty_type=strategy.cash, default_qty_value=1000, currency='USD')

//BB Strategy Starts

//***************BB***************
length = input(20, minval=1, title="BB Length")
src = input(close, title="BB Source")
mult = input(2.0, minval=0.001, maxval=50, title="BB StdDev")
basis = sma(src, length)
dev = mult * stdev(src, length)
upper = basis + dev
lower = basis - dev
offset = input(0, "BB Offset", type = input.integer, minval = -500, maxval = 500)
//plot(basis, "BB Basis", color=#FF6D00, offset = offset)
//p1 = plot(upper, "BB Upper", color=#2962FF, offset = offset)
//p2 = plot(lower, "BB Lower", color=#2962FF, offset = offset)
//fill(p1, p2, title = "BB Background", color=color.rgb(33, 150, 243, 95))

//***************MA 9***************
//len = input(9, minval=1, title="MA Length")
//srcma = input(close, title="MA Source")
//offsetma = input(title="MA Offset", type=input.integer, defval=0, minval=-500, maxval=500)
//out = sma(srcma, len)
//plot(out, color=color.green, title="MA", offset=offsetma)

//***************STRSI***************
smoothK = input(3, "K", minval=1)
lengthRSI = input(14, "RSI Length", minval=1)
lengthStoch = input(14, "Stochastic Length", minval=1)
srcrsi = input(close, title="RSI Source")
rsi1 = rsi(srcrsi, lengthRSI)
k = sma(stoch(rsi1, rsi1, rsi1, lengthStoch), smoothK)

//***************WF***************
// Define "n" as the number of periods and keep a minimum value of 2 for error handling.
n = input(title="Fractal Periods", defval=2, minval=2, type=input.integer)

// UpFractal
bool upflagDownFrontier = true
bool upflagUpFrontier0 = true
bool upflagUpFrontier1 = true
bool upflagUpFrontier2 = true
bool upflagUpFrontier3 = true
bool upflagUpFrontier4 = true

for i = 1 to n
    upflagDownFrontier := upflagDownFrontier and (high[n-i] < high[n])
    upflagUpFrontier0 := upflagUpFrontier0 and (high[n+i] < high[n])
    upflagUpFrontier1 := upflagUpFrontier1 and (high[n+1] <= high[n] and high[n+i + 1] < high[n])
    upflagUpFrontier2 := upflagUpFrontier2 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+i + 2] < high[n])
    upflagUpFrontier3 := upflagUpFrontier3 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+3] <= high[n] and high[n+i + 3] < high[n])
    upflagUpFrontier4 := upflagUpFrontier4 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+3] <= high[n] and high[n+4] <= high[n] and high[n+i + 4] < high[n])
flagUpFrontier = upflagUpFrontier0 or upflagUpFrontier1 or upflagUpFrontier2 or upflagUpFrontier3 or upflagUpFrontier4
upFractal = (upflagDownFrontier and flagUpFrontier)

// downFractal
bool downflagDownFrontier = true
bool downflagUpFrontier0 = true
bool downflagUpFrontier1 = true
bool downflagUpFrontier2 = true
bool downflagUpFrontier3 = true
bool downflagUpFrontier4 = true

for i = 1 to n
    downflagDownFrontier := downflagDownFrontier and (low[n-i] > low[n])
    downflagUpFrontier0 := downflagUpFrontier0 and (low[n+i] > low[n])
    downflagUpFrontier1 := downflagUpFrontier1 and (low[n+1] >= low[n] and low[n+i + 1] > low[n])
    downflagUpFrontier2 := downflagUpFrontier2 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+i + 2] > low[n])
    downflagUpFrontier3 := downflagUpFrontier3 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+i + 3] > low[n])
    downflagUpFrontier4 := downflagUpFrontier4 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+4] >= low[n] and low[n+i + 4] > low[n])
flagDownFrontier = downflagUpFrontier0 or downflagUpFrontier1 or downflagUpFrontier2 or downflagUpFrontier3 or downflagUpFrontier4
downFractal = (downflagDownFrontier and flagDownFrontier)

//colors
color_white = color.white
color_green = color.green
color_blue = color.blue
color_red = color.red
color_orange = color.orange

//***************Calculation***************
short = open > close and close[1] < upper[1] and (close[2] > upper[2] or high[2] > upper[2]) and (upFractal or upFractal[1] or upFractal[2] or upFractal[3] or upFractal[4] or upFractal[5]) and k > 70
long = open < close and close[1] > lower[1] and (close[2] < lower[2] or low[2] < lower[2]) and (downFractal or downFractal[1] or downFractal[2] or downFractal[3] or downFractal[4] or downFractal[5]) and k < 30

shortbb = short and (short[1] != true and short[2] != true and short[3] != true and short[4] != true)
longbb = long and (long[1] != true and long[2] != true and long[3] != true and long[4] != true)

//shortbb = high <= high[1] and high[1] <= high[2] and close[1] < upper[1] and close[2] > upper[2]
//longbb = low >= low[1] and low[1] >= low[2] and close[1] > lower[1] and close[2] < lower[2]
    
plotshape(shortbb, style=shape.labeldown, color=color_orange, location=location.abovebar, size=size.tiny, title="short label", text= "Short", textcolor=color_white)
plotshape(longbb, style=shape.labelup, color=color_blue, location=location.belowbar, size=size.tiny, title="long label", text= "Long", textcolor=color_white)

//conditions
enterLong = longbb
enterShort = shortbb
    
// STEP 1:
// Make inputs that set the take profit % (optional)
longProfitPerc = input(title="Long Take Profit (%)",
     type=input.float, minval=0.0, step=0.1, defval=0.5) * 0.01

shortProfitPerc = input(title="Short Take Profit (%)",
     type=input.float, minval=0.0, step=0.1, defval=0.5) * 0.01

// STEP 2:
// Figure out take profit price
longExitPrice  = strategy.position_avg_price * (1 + longProfitPerc)
shortExitPrice = strategy.position_avg_price * (1 - shortProfitPerc)

// Plot take profit values for confirmation
plot(series=(strategy.position_size > 0) ? longExitPrice : na,
     color=color.green, style=plot.style_circles,
     linewidth=1, title="Long Take Profit")
plot(series=(strategy.position_size < 0) ? shortExitPrice : na,
     color=color.red, style=plot.style_circles,
     linewidth=1, title="Short Take Profit")

// Submit entry orders
if (enterLong)
    strategy.entry(id="Long", long=true)

if (enterShort)
    strategy.entry(id="Short", long=false)

// STEP 3:
// Submit exit orders based on take profit price
// if (strategy.position_size > 0)
//     strategy.exit(id="LTP", limit=longExitPrice)

// if (strategy.position_size < 0)
//     strategy.exit(id="STP", limit=shortExitPrice)
    
// STEP 1:
// Set stop loss level with input options (optional)
longLossPerc = input(title="Long Stop Loss (%)",
     type=input.float, minval=0.0, step=0.1, defval=3) * 0.01

shortLossPerc = input(title="Short Stop Loss (%)",
     type=input.float, minval=0.0, step=0.1, defval=3) * 0.01

// STEP 2:
// Determine stop loss price
longStopPrice  = strategy.position_avg_price * (1 - longLossPerc)
shortStopPrice = strategy.position_avg_price * (1 + shortLossPerc)

// Plot stop loss values for confirmation
plot(series=(strategy.position_size > 0) ? longStopPrice : na,
     color=color.red, style=plot.style_cross,
     linewidth=1, title="Long Stop Loss")
plot(series=(strategy.position_size < 0) ? shortStopPrice : na,
     color=color.red, style=plot.style_cross,
     linewidth=1, title="Short Stop Loss")

// STEP 3:
// Submit exit orders based on calculated stop loss price
    
if (strategy.position_size > 0)
    strategy.exit(id="ExL",limit=longExitPrice, stop=longStopPrice)

if (strategy.position_size < 0)
    strategy.exit(id="ExS", limit=shortExitPrice, stop=shortStopPrice)
    
    